using Allumeria;
using Allumeria.Items;
using ModAPI.Abstractions;
using ModAPI.Abstractions.Items;
using ModAPI.Abstractions.Registries;
using ModAPI.Core.Helpers;
using System.Text.Json;

namespace ModAPI.Core.Registries
{
    internal class TranslationRegistry : ITranslationRegistry
    {
        public static readonly TranslationRegistry registry = new TranslationRegistry();
        private static Dictionary<(string locale, string key), string> _translations = [];

        public TranslationRegistry()
        {
        }

        public void Initialize()
        {
            string basePath = "res/translations";

            if (!Directory.Exists(basePath))
            {
                Logger.Warn("[ModMeria] No translations found at res/translations!");
                return;
            }

            Logger.Info("Indexing translations...");

            foreach (var dir in Directory.GetDirectories(basePath))
            {
                string locale = Path.GetFileName(dir);
                string keysPath = Path.Combine(dir, "keys.txt");

                if (!File.Exists(keysPath))
                {
                    Logger.Warn($"[ModMeria] Locale folder '{locale}' missing keys.txt, skipping.");
                    continue;
                }

                var entries = TranslationsHelper.ParseKeys(keysPath);

                foreach (var (key, value) in entries)
                {
                    _translations[(locale, key)] = value;
                }

                Logger.Info($"[ModMeria] Loaded {entries.Count} translations for {locale}");
            }
        }


        // Hack because IRegistry<T>
        public IReadOnlyDictionary<string, string> GetAll(string locale)
        {
            return _translations
                .Where(t => t.Key.locale == locale)
                .ToDictionary(t => t.Key.key, t => t.Value);
        }

        public IReadOnlyDictionary<string, string> GetAll()
        {
            return GetAll(Locales.EN_AU);
        }

        public string Register(string locale, string id, string item)
        {
            string basePath = "res/translations";
            string localePath = Path.Combine(basePath, locale);
            string translationFile = Path.Combine(localePath, "keys.txt");

            // If the language doesn't exist copy over defaults.
            if (!Directory.Exists(localePath))
            {
                string defaultPath = Path.Combine(basePath, "en-AU");
                Directory.CreateDirectory(localePath);

                foreach (var file in Directory.GetFiles(defaultPath, "*", SearchOption.AllDirectories))
                {
                    string destFile = file.Replace(defaultPath, localePath);
                    Directory.CreateDirectory(Path.GetDirectoryName(destFile)!);
                    File.Copy(file, destFile, overwrite: true);
                }

                string infoPath = Path.Combine(localePath, "info.json");

                if (File.Exists(infoPath))
                {
                    string jsonText = File.ReadAllText(infoPath);
                    using var jsonDoc = JsonDocument.Parse(jsonText);
                    var root = jsonDoc.RootElement;

                    var newInfo = new
                    {
                        name = locale,
                        gameVersion = Game.VERSION,
                        description = $"Automatically generated by ModMeria because the folder '{locale}' was not found.",
                        credit = root.GetProperty("credit").GetString(),
                        code = locale
                    };

                    string newJson = JsonSerializer.Serialize(newInfo, new JsonSerializerOptions { WriteIndented = true });
                    File.WriteAllText(infoPath, newJson);
                }
            }

            if (!File.Exists(translationFile))
                File.WriteAllText(translationFile, string.Empty);

            var lines = File.ReadAllLines(translationFile).ToList();
            bool exists = lines.Any(line => line.StartsWith(id + " "));
            if (exists)
                lines = lines.Select(line => line.StartsWith(id + " ") ? $"{id} {item}" : line).ToList();
            else
                lines.Add($"{id} {item}");

            File.WriteAllLines(translationFile, lines);

            _translations[(locale, id)] = item;

            Logger.Info($"[ModMeria] Added translation for {id} in {locale}");
            return id;
        }

        public string Register(string id, string item)
        {
            return this.Register(Locales.EN_AU, id, item);
        }

        public bool TryGet(string locale, string key, out string value)
        {
            return _translations.TryGetValue((locale, key), out value);
        }
        public string Register(string item)
        {
            throw new NotImplementedException();
        }

        public bool TryGet(string id, out string item)
        {
            return this.TryGet(Locales.EN_AU, id, out item);
        }
    }
}
